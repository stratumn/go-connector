// Code generated by MockGen. DO NOT EDIT.
// Source: go-connector/services/livesync (interfaces: Synchronizer)

// Package mocksynchronizer is a generated GoMock package.
package mocksynchronizer

import (
	gomock "github.com/golang/mock/gomock"
	go_chainscript "github.com/stratumn/go-chainscript"
	reflect "reflect"
)

// MockSynchronizer is a mock of Synchronizer interface
type MockSynchronizer struct {
	ctrl     *gomock.Controller
	recorder *MockSynchronizerMockRecorder
}

// MockSynchronizerMockRecorder is the mock recorder for MockSynchronizer
type MockSynchronizerMockRecorder struct {
	mock *MockSynchronizer
}

// NewMockSynchronizer creates a new mock instance
func NewMockSynchronizer(ctrl *gomock.Controller) *MockSynchronizer {
	mock := &MockSynchronizer{ctrl: ctrl}
	mock.recorder = &MockSynchronizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSynchronizer) EXPECT() *MockSynchronizerMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockSynchronizer) Register() <-chan []*go_chainscript.Link {
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(<-chan []*go_chainscript.Link)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockSynchronizerMockRecorder) Register() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSynchronizer)(nil).Register))
}
