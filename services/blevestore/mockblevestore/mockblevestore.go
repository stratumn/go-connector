// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blevesearch/bleve (interfaces: Index)

// Package mockblevestore is a generated GoMock package.
package mockblevestore

import (
	context "context"
	bleve "github.com/blevesearch/bleve"
	document "github.com/blevesearch/bleve/document"
	index "github.com/blevesearch/bleve/index"
	store "github.com/blevesearch/bleve/index/store"
	mapping "github.com/blevesearch/bleve/mapping"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndex is a mock of Index interface
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
}

// MockIndexMockRecorder is the mock recorder for MockIndex
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// Advanced mocks base method
func (m *MockIndex) Advanced() (index.Index, store.KVStore, error) {
	ret := m.ctrl.Call(m, "Advanced")
	ret0, _ := ret[0].(index.Index)
	ret1, _ := ret[1].(store.KVStore)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Advanced indicates an expected call of Advanced
func (mr *MockIndexMockRecorder) Advanced() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advanced", reflect.TypeOf((*MockIndex)(nil).Advanced))
}

// Batch mocks base method
func (m *MockIndex) Batch(arg0 *bleve.Batch) error {
	ret := m.ctrl.Call(m, "Batch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockIndexMockRecorder) Batch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockIndex)(nil).Batch), arg0)
}

// Close mocks base method
func (m *MockIndex) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIndexMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIndex)(nil).Close))
}

// Delete mocks base method
func (m *MockIndex) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIndexMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIndex)(nil).Delete), arg0)
}

// DeleteInternal mocks base method
func (m *MockIndex) DeleteInternal(arg0 []byte) error {
	ret := m.ctrl.Call(m, "DeleteInternal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInternal indicates an expected call of DeleteInternal
func (mr *MockIndexMockRecorder) DeleteInternal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInternal", reflect.TypeOf((*MockIndex)(nil).DeleteInternal), arg0)
}

// DocCount mocks base method
func (m *MockIndex) DocCount() (uint64, error) {
	ret := m.ctrl.Call(m, "DocCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DocCount indicates an expected call of DocCount
func (mr *MockIndexMockRecorder) DocCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocCount", reflect.TypeOf((*MockIndex)(nil).DocCount))
}

// Document mocks base method
func (m *MockIndex) Document(arg0 string) (*document.Document, error) {
	ret := m.ctrl.Call(m, "Document", arg0)
	ret0, _ := ret[0].(*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Document indicates an expected call of Document
func (mr *MockIndexMockRecorder) Document(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Document", reflect.TypeOf((*MockIndex)(nil).Document), arg0)
}

// FieldDict mocks base method
func (m *MockIndex) FieldDict(arg0 string) (index.FieldDict, error) {
	ret := m.ctrl.Call(m, "FieldDict", arg0)
	ret0, _ := ret[0].(index.FieldDict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldDict indicates an expected call of FieldDict
func (mr *MockIndexMockRecorder) FieldDict(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDict", reflect.TypeOf((*MockIndex)(nil).FieldDict), arg0)
}

// FieldDictPrefix mocks base method
func (m *MockIndex) FieldDictPrefix(arg0 string, arg1 []byte) (index.FieldDict, error) {
	ret := m.ctrl.Call(m, "FieldDictPrefix", arg0, arg1)
	ret0, _ := ret[0].(index.FieldDict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldDictPrefix indicates an expected call of FieldDictPrefix
func (mr *MockIndexMockRecorder) FieldDictPrefix(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDictPrefix", reflect.TypeOf((*MockIndex)(nil).FieldDictPrefix), arg0, arg1)
}

// FieldDictRange mocks base method
func (m *MockIndex) FieldDictRange(arg0 string, arg1, arg2 []byte) (index.FieldDict, error) {
	ret := m.ctrl.Call(m, "FieldDictRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(index.FieldDict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldDictRange indicates an expected call of FieldDictRange
func (mr *MockIndexMockRecorder) FieldDictRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDictRange", reflect.TypeOf((*MockIndex)(nil).FieldDictRange), arg0, arg1, arg2)
}

// Fields mocks base method
func (m *MockIndex) Fields() ([]string, error) {
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fields indicates an expected call of Fields
func (mr *MockIndexMockRecorder) Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockIndex)(nil).Fields))
}

// GetInternal mocks base method
func (m *MockIndex) GetInternal(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetInternal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternal indicates an expected call of GetInternal
func (mr *MockIndexMockRecorder) GetInternal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternal", reflect.TypeOf((*MockIndex)(nil).GetInternal), arg0)
}

// Index mocks base method
func (m *MockIndex) Index(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Index", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockIndexMockRecorder) Index(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndex)(nil).Index), arg0, arg1)
}

// Mapping mocks base method
func (m *MockIndex) Mapping() mapping.IndexMapping {
	ret := m.ctrl.Call(m, "Mapping")
	ret0, _ := ret[0].(mapping.IndexMapping)
	return ret0
}

// Mapping indicates an expected call of Mapping
func (mr *MockIndexMockRecorder) Mapping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mapping", reflect.TypeOf((*MockIndex)(nil).Mapping))
}

// Name mocks base method
func (m *MockIndex) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockIndexMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIndex)(nil).Name))
}

// NewBatch mocks base method
func (m *MockIndex) NewBatch() *bleve.Batch {
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(*bleve.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockIndexMockRecorder) NewBatch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockIndex)(nil).NewBatch))
}

// Search mocks base method
func (m *MockIndex) Search(arg0 *bleve.SearchRequest) (*bleve.SearchResult, error) {
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*bleve.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockIndexMockRecorder) Search(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndex)(nil).Search), arg0)
}

// SearchInContext mocks base method
func (m *MockIndex) SearchInContext(arg0 context.Context, arg1 *bleve.SearchRequest) (*bleve.SearchResult, error) {
	ret := m.ctrl.Call(m, "SearchInContext", arg0, arg1)
	ret0, _ := ret[0].(*bleve.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchInContext indicates an expected call of SearchInContext
func (mr *MockIndexMockRecorder) SearchInContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInContext", reflect.TypeOf((*MockIndex)(nil).SearchInContext), arg0, arg1)
}

// SetInternal mocks base method
func (m *MockIndex) SetInternal(arg0, arg1 []byte) error {
	ret := m.ctrl.Call(m, "SetInternal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInternal indicates an expected call of SetInternal
func (mr *MockIndexMockRecorder) SetInternal(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInternal", reflect.TypeOf((*MockIndex)(nil).SetInternal), arg0, arg1)
}

// SetName mocks base method
func (m *MockIndex) SetName(arg0 string) {
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName
func (mr *MockIndexMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIndex)(nil).SetName), arg0)
}

// Stats mocks base method
func (m *MockIndex) Stats() *bleve.IndexStat {
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(*bleve.IndexStat)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockIndexMockRecorder) Stats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIndex)(nil).Stats))
}

// StatsMap mocks base method
func (m *MockIndex) StatsMap() map[string]interface{} {
	ret := m.ctrl.Call(m, "StatsMap")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// StatsMap indicates an expected call of StatsMap
func (mr *MockIndexMockRecorder) StatsMap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsMap", reflect.TypeOf((*MockIndex)(nil).StatsMap))
}
