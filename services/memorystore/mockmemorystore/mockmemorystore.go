// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-node/core/db (interfaces: DB)

// Package mockmemorystore is a generated GoMock package.
package mockmemorystore

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/stratumn/go-node/core/db"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Batch mocks base method
func (m *MockDB) Batch() db.Batch {
	ret := m.ctrl.Call(m, "Batch")
	ret0, _ := ret[0].(db.Batch)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockDBMockRecorder) Batch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockDB)(nil).Batch))
}

// Close mocks base method
func (m *MockDB) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Delete mocks base method
func (m *MockDB) Delete(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDBMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockDB) Get(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), arg0)
}

// IteratePrefix mocks base method
func (m *MockDB) IteratePrefix(arg0 []byte) db.Iterator {
	ret := m.ctrl.Call(m, "IteratePrefix", arg0)
	ret0, _ := ret[0].(db.Iterator)
	return ret0
}

// IteratePrefix indicates an expected call of IteratePrefix
func (mr *MockDBMockRecorder) IteratePrefix(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratePrefix", reflect.TypeOf((*MockDB)(nil).IteratePrefix), arg0)
}

// IterateRange mocks base method
func (m *MockDB) IterateRange(arg0, arg1 []byte) db.Iterator {
	ret := m.ctrl.Call(m, "IterateRange", arg0, arg1)
	ret0, _ := ret[0].(db.Iterator)
	return ret0
}

// IterateRange indicates an expected call of IterateRange
func (mr *MockDBMockRecorder) IterateRange(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateRange", reflect.TypeOf((*MockDB)(nil).IterateRange), arg0, arg1)
}

// Put mocks base method
func (m *MockDB) Put(arg0, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDBMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDB)(nil).Put), arg0, arg1)
}

// Transaction mocks base method
func (m *MockDB) Transaction() (db.Transaction, error) {
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction
func (mr *MockDBMockRecorder) Transaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockDB)(nil).Transaction))
}

// Write mocks base method
func (m *MockDB) Write(arg0 db.Batch) error {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockDBMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDB)(nil).Write), arg0)
}
